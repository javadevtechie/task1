/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package data.read;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

public class Library {
	SortedMap<Integer, BookerPrize> bookerPrizeMap = new TreeMap<>();
	
	public static void main(String[] args) throws IOException {
		Scanner scanner = new Scanner(System.in);
		int option = 1;
		Library l = new Library();
		SortedMap<Integer, BookerPrize> loadData = l.loadData();
		while (option != 0) {
			l.getMenu();
			try {
				
				option = scanner.nextInt();
				//int ch=scanner.nextInt();
				switch (option) {
				case 1:
					l.bookerPrizeWinnerList();
					break;
				case 2:
					l.selectOption();
					break;
				case 3:
					l.searchOption();
					break;

				default:
					break;
				}
			} catch (InputMismatchException ex) {
				System.out.println("Please enter an integer value between 0 and 3" );
                scanner.next();
				
			} catch (Exception ex) {
				System.out.println("An unexpected error happened. Please try again");
				scanner.next();
			}
		}

		
		
	}

	public void getMenu() {
		System.out.format("------------------------%n");
		System.out.println("Booker prize menu");
		System.out.format("------------------------%n");

		System.out.println("List.............1");
		System.out.println("Select...........2");
		System.out.println("Search...........3");
		System.out.println("Exit.............0");
		System.out.format("------------------------%n");
		//System.out.format("------------------------%n");
		System.out.println("Enter choice:>");
	}

	private void searchOption() {
		System.out.println("Enter book title or partial book title > ");
		Scanner sc=new Scanner(System.in);
		String s=sc.next();
		
		List<Entry<Integer, BookerPrize>> collect = bookerPrizeMap.entrySet().stream()
				.filter(item -> item.getValue().getWinner().getTitle().toLowerCase().contains(s))
				.collect(Collectors.toList());
		String leftAlignFormat = "| %-19s | %-30s | %-19s | %-5s | %n";
		if (!collect.isEmpty()) {
			Integer year = collect.get(0).getKey();
			System.out
					.format("--------------------------------------------------------------------------------------%n");
			System.out
					.format("| Title               | Author                         | Status              | Year  |%n");
			System.out
					.format("--------------------------------------------------------------------------------------%n");
			System.out.format(leftAlignFormat, collect.get(0).getValue().getWinner().getTitle(),
					collect.get(0).getValue().getWinner().getAuthor(), "Winner", year);
			System.out
					.format("--------------------------------------------------------------------------------------%n");
		}
		for (Entry<Integer, BookerPrize> key : bookerPrizeMap.entrySet()) {
			for (Book entry : key.getValue().getShorList()) {
				if (entry.getTitle().toLowerCase().contains("pi")) {
					System.out.format(leftAlignFormat, entry.getTitle(), entry.getAuthor(), "Shortlisted",
							key.getKey());
					System.out.format(
							"--------------------------------------------------------------------------------------%n");
				}

			}

		}
		System.out.println();
	}

	private void selectOption() {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter Year>");
		Integer key = sc.nextInt();
		System.out.format(
				"----------------------------------------------------------------------------------------------------------------------------------------%n");
		System.out.format(
				"| Author              | Book Title                                   | Publisher              | Chair            |Panel                |%n");
		System.out.format(
				"----------------------------------------------------------------------------------------------------------------------------------------%n");

		String leftAlignFormat = "| %-19s | %-44s | %-22s | %-16s | %-19s | %n";
		System.out.format(leftAlignFormat, bookerPrizeMap.get(key).getWinner().getAuthor().toUpperCase(),
				bookerPrizeMap.get(key).getWinner().getTitle().toUpperCase(),
				bookerPrizeMap.get(key).getWinner().getPublisher().toUpperCase(), "", "");
		System.out.format(
				"---------------------------------------------------------------------|------------------------                   |                     |%n");

		String leftAlignFormat1 = "| %-19s |  %-43s | %-22s | %-16s | %-19s | %n";
		String chairPerson = bookerPrizeMap.get(key).getChairPersion();

		AtomicInteger count = new AtomicInteger(0);
		int booksize = bookerPrizeMap.get(key).getShorList().size() / 2;
		// int panelSize = bookerPrizeMap.get(key).getShorList().size() -
		// bookerPrizeMap.get(key).getPanel().size();

		bookerPrizeMap.get(key).getShorList().stream().forEach(book -> {

			System.out.format(leftAlignFormat1, book.getAuthor(), book.getTitle(), book.getPublisher(),
					(booksize == count.get()) ? chairPerson : "",
					(bookerPrizeMap.get(key).getPanel().size() > count.get())
							? bookerPrizeMap.get(key).getPanel().get(count.get())
							: "");
			count.incrementAndGet();
		});
		System.out.format(
				"----------------------------------------------------------------------------------------------------------------------------------------%n");
//		bookerPrizeMap.entrySet().stream().forEach(bookerPrize -> {
//
//			String leftAlignFormat = "| %-6s | %-33s | %-20s | %-22s |%n";
//			System.out.format(leftAlignFormat, bookerPrize.getKey(), bookerPrize.getValue().getWinner().getTitle(),
//					bookerPrize.getValue().getWinner().getAuthor(), bookerPrize.getValue().getWinner().getPublisher());
//
//		});

	}

	public void bookerPrizeWinnerList() {
		System.out.format(
				"----------------------------------------------------------------------------------------------%n");
		System.out.format(
				"| Year   | Title                             | Author               | Publisher              |%n");
		System.out.format(
				"----------------------------------------------------------------------------------------------%n");

		bookerPrizeMap.entrySet().stream().forEach(bookerPrize -> {

			String leftAlignFormat = "| %-6s | %-33s | %-20s | %-22s |%n";
			System.out.format(leftAlignFormat, bookerPrize.getKey(), bookerPrize.getValue().getWinner().getTitle(),
					bookerPrize.getValue().getWinner().getAuthor(), bookerPrize.getValue().getWinner().getPublisher());

		});
		System.out.format(
				"----------------------------------------------------------------------------------------------%n");
	}

	public SortedMap<Integer, BookerPrize> loadData() throws IOException {
		List<String> lines = com.google.common.io.Files.readLines(new File("booker-data.txt"),
				Charset.defaultCharset());
		int lineNumber = 1;

		for (String line : lines) {

			if (lineNumber % 3 == 1) {
				BookerPrize bookerPrize = new BookerPrize();
				bookerPrize.setWinner(setBookDetails(line));
				bookerPrizeMap.put(Integer.parseInt(line.substring(0, line.indexOf(":"))), bookerPrize);
			} else if (lineNumber % 3 == 2) {

				String[] token = line.split("[|]");
				Integer lastKey = bookerPrizeMap.lastKey();
				List<Book> setShortListBooks = new ArrayList<Book>();
				for (String s : token) {
					Book setShortListDetails = setShortListDetails(s);
					setShortListBooks.add(setShortListDetails);
				}
				bookerPrizeMap.get(lastKey).setShorList(setShortListBooks);

			} else if (lineNumber % 3 == 0) {
				String[] token = line.split("[,]");
				Integer lastKey = bookerPrizeMap.lastKey();
				List<String> panelList = new ArrayList<String>();
				for (String s : token) {
					if (s.contains("(chair)")) {
						String chairPerson = s.substring(0, s.indexOf("("));
						bookerPrizeMap.get(lastKey).setChairPersion(chairPerson);
					} else {
						panelList.add(s);
					}
				}
				bookerPrizeMap.get(lastKey).setPanel(panelList);
			}
			lineNumber++;
		}
		return bookerPrizeMap;
	}

	private Book setShortListDetails(String line) {
		String[] token = line.split("[,()]");
		Book book = new Book();
		book.setAuthor(token[0]);
		book.setTitle(token[1]);
		book.setPublisher(token[2]);
		return book;
	}

	public Book setBookDetails(String line) {

		String[] token = line.split("[:,()]");
		Book book = new Book();
		book.setAuthor(token[1]);
		book.setTitle(token[2]);
		book.setPublisher(token[3]);
		return book;

	}
}
